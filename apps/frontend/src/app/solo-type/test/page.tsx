"use client";

import React, { useState, useEffect } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { SoloTypeFormProps } from "@/types/types";
import { useRouter, useSearchParams } from "next/navigation";
import { PinkButton } from "@/stories/PinkButton";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination } from "swiper/modules";

import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

export const questions = [
  {
      id: "solo_level",
      question: "„ÇΩ„É≠Ê¥ª„ÅÆÁµåÈ®ì„ÅØÔºü",
      icon: "ü§î",
      options: [
          { value: "ÂàùÂøÉËÄÖ", label: "ÂàùÂøÉËÄÖ" },
          { value: "ÁµåÈ®ìËÄÖ", label: "ÁµåÈ®ìËÄÖ" },
      ],
  },
  {
      id: "activity_preference",
      question: "„Ç§„É≥„Éâ„Ç¢Ê¥æÔºü„Ç¢„Ç¶„Éà„Éâ„Ç¢Ê¥æÔºü",
      icon: "üèÉ‚Äç‚ôÄÔ∏è",
      options: [
          { value: "„Ç§„É≥„Éâ„Ç¢Ê¥æ", label: "„Ç§„É≥„Éâ„Ç¢Ê¥æ" },
          { value: "„Ç¢„Ç¶„Éà„Éâ„Ç¢Ê¥æ", label: "„Ç¢„Ç¶„Éà„Éâ„Ç¢Ê¥æ" },
      ],
  },
  {
      id: "time_preference",
      question: "ÊúùÂûãÔºüÂ§úÂûãÔºü",
      icon: "üåû",
      options: [
          { value: "ÊúùÂûã", label: "ÊúùÂûã" },
          { value: "Â§úÂûã", label: "Â§úÂûã" },
      ],
  },
  {
      id: "is_planned",
      question: "Ë®àÁîªÁöÑÔºü",
      icon: "üìÖ",
      options: [
          { value: "true", label: "Ë®àÁîªÁöÑ„Åß„ÅÇ„Çã" },
          { value: "false", label: "Ë®àÁîªÁöÑ„Åß„ÅØ„Å™„ÅÑ" },
      ],
  },
  {
      id: "weekend_plan_preference",
      question: "ÈÄ±Êú´„ÅØÂøÖ„Åö‰∫àÂÆö„ÇíÂÖ•„Çå„Åü„ÅÑÔºü",
      icon: "üè°",
      options: [
          { value: "true", label: "ÂÖ•„Çå„Åü„ÅÑ" },
          { value: "false", label: "ÂÖ•„Çå„Åü„Åè„Å™„ÅÑ" },
      ],
  },
  {
      id: "after_work_preference",
      question: "‰ªï‰∫ãÂ∏∞„Çä„ÅØ„Å©„ÅÜ„Åô„ÇãÔºü",
      icon: "üè¢",
      options: [
          {
              value: "„Åä„ÅÑ„Åó„ÅÑ„ÇÇ„ÅÆ„ÇíÈ£ü„Åπ„Å¶Â∏∞„Çã",
              label: "„Åä„ÅÑ„Åó„ÅÑ„ÇÇ„ÅÆ„ÇíÈ£ü„Åπ„Å¶Â∏∞„Çã",
          },
          {
              value: "Áôí„Åó„Å®„É™„Éï„É¨„ÉÉ„Ç∑„É•„ÇíÊ±Ç„ÇÅ„Çã",
              label: "Áôí„Åó„Å®„É™„Éï„É¨„ÉÉ„Ç∑„É•„ÇíÊ±Ç„ÇÅ„Çã",
          },
      ],
  },
  {
      id: "comfort_adventure",
      question: "ÂÆâÂÆö„Çà„ÇäÂà∫ÊøÄ„ÇíÊ±Ç„ÇÅ„ÇãÔºü",
      icon: "üé¢",
      options: [
          { value: "ÂÆâÂÆö„ÇíÊ±Ç„ÇÅ„Çã", label: "ÂÆâÂÆö„ÇíÊ±Ç„ÇÅ„Çã" },
          { value: "Âà∫ÊøÄ„ÇíÊ±Ç„ÇÅ„Çã", label: "Âà∫ÊøÄ„ÇíÊ±Ç„ÇÅ„Çã" },
      ],
  },
];


const SoloTypeForm: React.FC = () => {
    const router = useRouter();

    const { register, handleSubmit, setValue, watch } =
        useForm<SoloTypeFormProps>();
    const searchParams = useSearchParams();
    const [errorMessage, setErrorMessage] = useState<string | null>(null);
    const [userId, setUserId] = useState<string | null>(null);
    const [swiperInstance, setSwiperInstance] = useState<any>(null);

    const watchedFields = watch();

    useEffect(() => {
        const userIdFromParams = searchParams.get("userId");
        if (userIdFromParams) {
            setUserId(userIdFromParams);
        } else {
            console.error("„É¶„Éº„Ç∂ID„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
        }
    }, [searchParams]);

    const isFormComplete = questions.every(
        (question) =>
            watchedFields[question.id as keyof SoloTypeFormProps] !== undefined
    );

    const onSubmit: SubmitHandler<SoloTypeFormProps> = async (data) => {
        if (!userId) {
            console.error("„É¶„Éº„Ç∂ID„ÅåÁ©∫„Åß„Åô");
            return;
        }

        try {
            const response = await fetch(
                `${process.env.NEXT_PUBLIC_API_USERS_TYPETEST_URL}/${userId}`,
                {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                }
            );
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const result = await response.json();
            console.log("ÊàêÂäü", result);

            const queryParams = new URLSearchParams({
                solo_type: result.solo_type,
                userId: userId,
            }).toString();

            router.push(`/solo-type/test/result?${queryParams}`);
        } catch (error) {
            console.error("„Ç®„É©„Éº:", error);
            setErrorMessage(
                "Ë®∫Êñ≠„ÅÆÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ"
            );
        }
    };

    const handleOptionSelect = (
        questionId: keyof SoloTypeFormProps,
        value: string | boolean
    ) => {
        setValue(questionId, value);
        if (swiperInstance && swiperInstance.slideNext) {
            swiperInstance.slideNext();
        }
    };

    return (
        <div className="container mx-auto my-5 max-w-xl bg-white p-10 rounded-2xl">
            <h2 className="text-center mb-4 mt-2">
                „ÅÇ„Å™„Åü„ÅÆ„ÇΩ„É≠Ê¥ª„Çø„Ç§„Éó„ÇíË®∫Êñ≠üîç
            </h2>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                <Swiper
                    modules={[Navigation, Pagination]}
                    spaceBetween={50}
                    slidesPerView={1}
                    navigation
                    pagination={{ clickable: true }}
                    onSwiper={(swiper) => setSwiperInstance(swiper)}
                    className="custom-swiper"
                >
                    {questions.map((question, index) => (
                        <SwiperSlide key={question.id}>
                            <div className="mb-8">
                                <h3 className="font-semibold m-6 text-pink-500 text-center">
                                    „Äå{question.question}„Äç
                                </h3>
                                <div className="flex justify-center items-center mb-6">
                                    <div className="text-6xl">
                                        {question.icon}
                                    </div>
                                </div>
                                <div className="space-y-4 items-center mx-16 mt-8">
                                    {question.options.map((option) => (
                                        <button
                                            key={option.value.toString()}
                                            type="button"
                                            onClick={() =>
                                                handleOptionSelect(
                                                    question.id as keyof SoloTypeFormProps,
                                                    option.value
                                                )
                                            }
                                            className={`w-full py-3 px-4 border ${
                                                watchedFields[
                                                    question.id as keyof SoloTypeFormProps
                                                ] === option.value
                                                    ? "bg-pink-100 border-pink-500 text-pink-500"
                                                    : "border-pink-300 text-pink-500 bg-white hover:bg-pink-100"
                                            } rounded-full shadow-sm text-lg font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500 transition-colors duration-200`}
                                        >
                                            {option.label}
                                        </button>
                                    ))}
                                </div>
                            </div>
                            {index === questions.length - 1 && (
                                <div className="flex justify-center m-8">
                                    <PinkButton
                                        type="submit"
                                        disabled={!isFormComplete}
                                        className={
                                            !isFormComplete ? "opacity-50" : ""
                                        }
                                    >
                                        Ë®∫Êñ≠„Åô„Çã
                                    </PinkButton>
                                </div>
                            )}
                        </SwiperSlide>
                    ))}
                </Swiper>
            </form>
        </div>
    );
};

export default SoloTypeForm;
